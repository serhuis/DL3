###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           08/Nov/2017  15:50:27
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  regvar
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  E:\_ARTON_PROJ\ARTON-DL3\soft\current\hardware.c
#    Command line  =  
#        E:\_ARTON_PROJ\ARTON-DL3\soft\current\hardware.c -lcN
#        E:\_ARTON_PROJ\ARTON-DL3\soft\current\IAR\Debug\List -o
#        E:\_ARTON_PROJ\ARTON-DL3\soft\current\IAR\Debug\Obj --no_unroll
#        --no_inline --no_tbaa --debug -D__MSP430G2553__ -e --double=32
#        --regvar_r4 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\430\lib\dlib\dl430fn.h" -I ..\ -I .\ -Om
#    List file     =  
#        E:\_ARTON_PROJ\ARTON-DL3\soft\current\IAR\Debug\List\hardware.lst
#    Object file   =  
#        E:\_ARTON_PROJ\ARTON-DL3\soft\current\IAR\Debug\Obj\hardware.r43
#
###############################################################################

E:\_ARTON_PROJ\ARTON-DL3\soft\current\hardware.c
      1          /**********************************************************************************
      2           *
      3           *      Hardware routines
      4           *
      5           **********************************************************************************
      6           * FileName:        hardware.c
      7           * Version:			1.00
      8           *
      9           * Processor:       MSP430G2xxx
     10           * Complier:        IAR Workbench for MSP430 v4.50 or higher
     11           *                  
     12           * Company:         ARTON
     13           *
     14           *
     15           * Author               Date      	Version	  		Comment
     16           *-------------------------------------------------------------------------------
     17           * Oleg Semeniuk	 16.11.2013    	1.00		Release for v1.00
     18           *
     19          
     20           *********************************************************************************/
     21          /*********************************************************************************/
     22          /*                                 INCLUDES                                      */
     23          /*********************************************************************************/
     24          #include  "hardware.h"
     25          #include  "main.h"
     26          #include  "delay.h"
     27          /*********************************************************************************/
     28          /*                                 VARIABLES                                     */
     29          /*********************************************************************************/
     30          	 
     31          extern __regvar __no_init tFlags 	f 	 @ __R4; 
     32          
     33          static u8 i, /*strob,*/ but;
     34          
     35          
     36          /*********************************************************************************/
     37          /*                                FUNCTIONS                                      */
     38          /*********************************************************************************/
     39          
     40          
     41          
     42          //--------------------------------------------------------------------------------
     43          // Function		: __interrupt void PORT1_ISR(void)
     44          // Parameters	: None
     45          // Return		: None
     46          // Description	: GPIO Interrupt routine for Soft UART & Button Press 
     47          //--------------------------------------------------------------------------------
     48          #pragma vector=PORT1_VECTOR
     49          __interrupt void PORT1_ISR(void) {   
     50          	//
     51          	if (BUT_IFG & BUT_BIT) {
     52          		//BUT_IFG &= ~BUT_BIT;    		// Обнуляем флаг прерывания
     53                  //
     54          		if (BUT_IES & BUT_BIT) {		// Спадающий фронт
     55          			but = 1;
     56          			for (i = 0; i < 8; i++) {
     57          				if (BUT_IN & BUT_BIT) {
     58          					but = 0;
     59          					break;
     60          				}
     61          				DelayUs(200);
     62          			}
     63          			if (but == 1) {
     64          				BUT_IES &= ~BUT_BIT;
     65          				fButtonDownOn = 1;
     66          			}
     67          		}else{
     68          			but = 1;
     69          			for (i = 0; i < 4; i++) {
     70          				if ((BUT_IN & BUT_BIT) == 0) {
     71          					but = 0;
     72          					break;
     73          				}
     74          				DelayUs(100);
     75          			}
     76          			if (but == 1) {
     77          				BUT_IES |= BUT_BIT;
     78          				fButtonUpOn = 1;
     79          			}
     80          		}
     81          		//
     82          		BUT_IFG &= ~BUT_BIT;    		// Обнуляем флаг прерывания
     83          		//
     84          //		__bic_SR_register_on_exit(LPM3_bits);               // Clear LPM3 bits from 0(SR) Просыпаемся
     85                          LPM3_EXIT;
     86          	}
     87          }
     88          
     89          
     90          //--------------------------------------------------------------------------------
     91          // Function		: __interrupt void PORT2_ISR(void)
     92          // Parameters	: None
     93          // Return		: None
     94          // Description	: GPIO Interrupt routine for RF Button Press 
     95          //--------------------------------------------------------------------------------
     96          #pragma vector=PORT2_VECTOR
     97          __interrupt void PORT2_ISR(void) {   
     98          	
     99          	//
    100          	if ((INTER_IE & INTER_BIT) && (INTER_IFG & INTER_BIT)) {
    101          		INTER_IFG &= ~INTER_BIT;    			// Обнуляем флаг прерывания
    102                  //
    103          		BCSCTL1 = CALBC1_8MHZ; 					// Используем частоту 8 MГц
    104          		DCOCTL =  CALDCO_8MHZ;
    105          		//
    106          		fRxLineDownOn = 1;
    107          	}
    108          	//
    109          /*
    110          	if ((STROB_IE & STROB_BIT) && (STROB_IFG & STROB_BIT)) {
    111          
    112          		strob = 1;
    113          		for (i = 0; i < 4; i++) {
    114          			if ((STROB_IN & STROB_BIT) == 0) {
    115          				strob = 0;
    116          				break;
    117          			}
    118          		}
    119          		
    120          		if (strob) {
    121          			fStartPulse = strob;					// Set flag
    122          			STROB_IE_Disable();
    123          		}else{
    124          			fStartPulse = strob;					// Set flag
    125          		}
    126          			
    127          		STROB_IFG &= ~STROB_BIT;    		// Clear ISR flag
    128          	}
    129          */
    130          }
    131          
    132          
    133          //--------------------------------------------------------------------------------
    134          // Function		: void STROB_IE_Enable(void)
    135          // Parameters	: None
    136          // Return		: None
    137          // Description	: GPIO Interrupt routine for RF Button Press 
    138          //--------------------------------------------------------------------------------
    139          void STROB_IE_Enable(void) {   
    140          /*
    141                  _BIC_SR(GIE);    					// Disable interrupts
    142          	STROB_IFG &= ~STROB_BIT;    		// Clear ISR flag
    143          	STROB_IE |=   STROB_BIT;
    144          	_BIS_SR(GIE);    					// Enanble interrupts
    145          */	
    146          }
    147          
    148          
    149          //--------------------------------------------------------------------------------
    150          // Function		: void STROB_IE_Enable(void)
    151          // Parameters	: None
    152          // Return		: None
    153          // Description	: GPIO Interrupt routine for RF Button Press 
    154          //--------------------------------------------------------------------------------
    155          void STROB_IE_Disable(void) {   
    156          /*
    157          	STROB_IE &= ~ STROB_BIT;
    158          */	
    159          }
    160          
    161          
    162          
    163          //---------------------------------------------------------------------------------
    164          // Function		: void TEST_BUT_INT_Init(void)
    165          // Parameters	: None
    166          // Return		: None
    167          // Description	: Initialization interrupts from TEST Button
    168          //---------------------------------------------------------------------------------
    169          void BUT_INT_Init(void) {
    170          	//
    171          	BUT_REN |= BUT_BIT; 		// PULL enable
    172          	BUT_OUT |= BUT_BIT;			// PULLUP Resistor 
    173          	
    174          	BUT_DIR &= ~BUT_BIT;
    175          	BUT_IES |= BUT_BIT;  		// прерывание по переходу из 1 в 0, 
    176                          				// устанавливается соответствующим битом IES.x = 1.
    177          	BUT_IFG &= ~BUT_BIT; 		// Для предотвращения немедленного срабатывания прерывания,
    178                          				// обнуляем его флаг для P1.3 до разрешения прерываний
    179          	BUT_IE  |= BUT_BIT;   		// Разрешаем прерывания для P1.3
    180          }
    181          
    182          
    183          //---------------------------------------------------------------------------------
    184          // Function		: void INTER_INT_Init(void)
    185          // Parameters	: None
    186          // Return		: None
    187          // Description	: Initialization interrupts from Intercom (Soft UART)
    188          //---------------------------------------------------------------------------------
    189          void INTER_INT_Init(void) {
    190          	//
    191          	INTER_REN |= INTER_BIT; 		// PULL enable
    192          	INTER_OUT |= INTER_BIT;			// PULLUP Resistor 
    193          	
    194          	INTER_DIR &= ~INTER_BIT;
    195          	INTER_IES |= INTER_BIT;  		// прерывание по переходу из 1 в 0, 
    196                          					// устанавливается соответствующим битом IES.x = 1.
    197          	INTER_IFG &= ~INTER_BIT; 		// Для предотвращения немедленного срабатывания прерывания,
    198                          					// обнуляем его флаг для P1.3 до разрешения прерываний
    199          	INTER_IE  |= INTER_BIT;   		// Разрешаем прерывания для P1.3
    200          }
    201          
    202          
    203          //---------------------------------------------------------------------------------
    204          // Function		: void SNIFF_IRQ_INT_Init(void)
    205          // Parameters	: None
    206          // Return		: None
    207          // Description	: Initialization interrupts from RX Sniff CC112x (GPIO2)
    208          //---------------------------------------------------------------------------------
    209          /*			
    210          void STROB_IRQ_Init(void) {
    211          
    212          	STROB_DIR &= ~STROB_BIT;		
    213          	STROB_IES &= ~STROB_BIT;  		// прерывание по переходу из 0 в 1, 
    214          
    215          	STROB_IFG &= ~STROB_BIT; 		// Для предотвращения немедленного срабатывания прерывания,
    216          	STROB_IE  |= STROB_BIT;   		// Разрешаем прерывания
    217          	STROB_IE_Disable();
    218          
    219          }
    220          */
    221          
    222          
    223          //---------------------------------------------------------------------------------
    224          // Function		: void AMP_SetGain(u8 value)
    225          // Parameters	: None
    226          // Return		: None
    227          // Description	: Initialization interrupts from RX Sniff CC112x (GPIO2)
    228          //---------------------------------------------------------------------------------
    229          void AMP_SetGain(u8 value) {
    230          	
    231          	GAIN_1_CLR();
    232          	GAIN_2_CLR();
    233          	
    234          	if (value & 1) GAIN_1_SET();
    235          	if (value & 2) GAIN_2_SET();
    236          
    237          }
    238          
    239          
    240          //---------------------------------------------------------------------------------
    241          // Function		: void GPIO_Init(void)
    242          // Parameters	: None
    243          // Return		: None
    244          // Description	: Initialization GPIO 
    245          //---------------------------------------------------------------------------------
    246          void GPIO_Init(void) {
    247          
    248          	P1OUT = 0;	
    249          	P2OUT = 0;
    250          	
    251          	AMP_PWR_DIR 	|= AMP_PWR_BIT;
    252          	VREF_DIR	|= VREF_BIT;
    253          	RED_DIR 	|= RED_BIT;
    254          	YEL_DIR 	|= YEL_BIT;
    255          	FIRE_DIR 	|= FIRE_BIT;
    256          	NFAULT_DIR 	|= NFAULT_BIT;
    257                  IRED_DIR        |= IRED_BIT;
    258          	VREF_DIR 	|= VREF_BIT;
    259          	
    260                  TEST_OUT_DIR    |= TEST_OUT_BIT;
    261          	
    262          	VREF_OUT 	|= VREF_BIT;
    263          
    264          	GAIN_1_DIR 	|= GAIN_1_BIT;
    265          	GAIN_2_DIR 	|= GAIN_2_BIT;
    266          
    267          	P1SEL = 0;
    268          	P2SEL = 0;
    269                  
    270                  NFAULT_SET();  
    271                  TEST_OUT_CLR();
    272                  
    273          	
    274          	BUT_INT_Init();			// Init interrupts from TEST button 
    275          	INTER_INT_Init();				// Init interrupts from Intercom
    276          //	STROB_IRQ_Init();                      //DL3
    277          }
    278          
    279          // End hardware.c

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   AMP_SetGain
      2   BUT_INT_Init
      2   GPIO_Init
        2   -> BUT_INT_Init
        0   -> INTER_INT_Init
      2   INTER_INT_Init
     12   PORT1_ISR
       12   -> DelayUs
      4   PORT2_ISR
      2   STROB_IE_Disable
      2   STROB_IE_Enable


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      26  AMP_SetGain
       1  BCSCTL1
      26  BUT_INT_Init
       1  CALBC1_8MHZ
       1  CALDCO_8MHZ
       1  DCOCTL
      98  GPIO_Init
      38  INTER_INT_Init
       1  P1DIR
       1  P1IE
       1  P1IES
       1  P1IFG
       1  P1IN
       1  P1OUT
       1  P1REN
       1  P1SEL
       1  P2DIR
       1  P2IE
       1  P2IES
       1  P2IFG
       1  P2OUT
       1  P2REN
       1  P2SEL
     134  PORT1_ISR
       2  PORT1_ISR::??INTVEC 4
      40  PORT2_ISR
       2  PORT2_ISR::??INTVEC 6
       2  STROB_IE_Disable
       2  STROB_IE_Enable
       1  but
       1  i

 
 366 bytes in segment CODE
  19 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 
 366 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
   2 bytes of DATA  memory (+ 19 bytes shared)

Errors: none
Warnings: none
